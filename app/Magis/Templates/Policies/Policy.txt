<?php

namespace App\Policies{moduleWithLeadingSlash};

use App\User;
use App\Models\{modelNamespace};
use Illuminate\Support\Facades\Auth;
use App\Magis\Services\PolicyService;
use Illuminate\Auth\Access\HandlesAuthorization;

class {capitalized}Policy
{
    use HandlesAuthorization;

    /**
     * Determine whether the user can view the {capitalized}.
     *
     * @param  App\User  $user
     * @param  App\{capitalized}  $subject
     * @return mixed
     */
    public function view(User $user, {capitalized} $subject)
    {
        return $this->checkPermission($user, $subject, PolicyService::getPermissions($user), 'view-{snakecase}');
    }

    /**
     * Determine whether the user can create {capitalized}.
     *
     * @param  App\User  $user
     * @return mixed
     */
    public function create(User $user)
    {
        return isset(PolicyService::getPermissions($user)['create-{snakecase}']);
    }

    /**
     * Determine whether the user can manage {capitalized}.
     *
     * @param  App\User  $user
     * @return mixed
     */
    public function manage(User $user)
    {
        return isset(PolicyService::getPermissions($user)['manage-{pluralsnakecase}']);
    }

    /**
     * Determine whether the user can list {capitalized}.
     *
     * @param  App\User  $user
     * @return mixed
     */
    public function list(User $user)
    {
        return isset(PolicyService::getPermissions($user)['list-{pluralsnakecase}']);
    }

    /**
     * Determine whether the user can update the {capitalized}.
     *
     * @param  App\User  $user
     * @param  App\{capitalized}  $subject
     * @return mixed
     */
    public function update(User $user, {capitalized} $subject)
    {
        return $this->checkPermission($user, $subject, PolicyService::getPermissions($user), 'update-{snakecase}');
    }

    /**
     * Determine whether the user can revert the {capitalized}.
     *
     * @param  App\User  $user
     * @param  App\{capitalized}  $subject
     * @return mixed
     */
    public function revert(User $user, {capitalized} $subject)
    {
        return $this->checkPermission($user, $subject, PolicyService::getPermissions($user), 'revert-{snakecase}');
    }

    /**
     * Determine whether the user can restore the {capitalized}.
     *
     * @param  App\User  $user
     * @param  App\{capitalized}  $subject
     * @return mixed
     */
    public function restore(User $user, {capitalized} $subject)
    {
        return $this->checkPermission($user, $subject, PolicyService::getPermissions($user), 'restore-{snakecase}');
    }

    /**
     * Determine whether the user can draft the {capitalized}.
     *
     * @param  App\User  $user
     * @param  App\{capitalized}  $subject
     * @return mixed
     */
    public function draft(User $user, {capitalized} $subject)
    {
        return $this->checkPermission($user, $subject, PolicyService::getPermissions($user), 'draft-{snakecase}');
    }

    /**
     * Determine whether the user can publish the {capitalized}.
     *
     * @param  App\User  $user
     * @param  App\{capitalized}  $subject
     * @return mixed
     */
    public function publish(User $user, {capitalized} $subject)
    {
        return $this->checkPermission($user, $subject, PolicyService::getPermissions($user), 'publish-{snakecase}');
    }

    /**
     * Determine whether the user can schedule the {capitalized}.
     *
     * @param  App\User  $user
     * @param  App\{capitalized}  $subject
     * @return mixed
     */
    public function schedule(User $user, {capitalized} $subject)
    {
        return $this->checkPermission($user, $subject, PolicyService::getPermissions($user), 'schedule-{snakecase}');
    }

    /**
     * Determine whether the user can preview the {capitalized}.
     *
     * @param  App\User  $user
     * @param  App\{capitalized}  $subject
     * @return mixed
     */
    public function preview(User $user, {capitalized} $subject)
    {
        return $this->checkPermission($user, $subject, PolicyService::getPermissions($user), 'preview-{snakecase}');
    }

    /**
     * Determine whether the user can delete the user.
     *
     * @param  App\User  $user
     * @param  App\{capitalized}  $subject
     * @return mixed
     */
    public function delete(User $user, {capitalized} $subject)
    {
        return $this->checkPermission($user, $subject, PolicyService::getPermissions($user), 'delete-{snakecase}');
    }

    /**
     * Gets permission either from session or DB
     * 
     * @param  User   $user User to be authorized
     * @return array       Permission labels
     */
    private function getPermissions(User $user) 
    {
        //if $user is currentlly logged-in user, the sessions are already in the session
        if($user->id === Auth::user()->id) {
            return session('permissions'); 
        } else {
            //fetch the permissions from the DB
            return $user->permissions();
        }
    }

    /**
     * Checks if a user has a specific permission
     * 
     * @param  User   $user        User to be authorized
     * @param  User   $subject        Object to check on
     * @param  array $permissions Permission labels of user
     * @param  string $label       Permission to be checked on
     * @return boolean              Whether the user is authorized
     */
    private function checkPermission(User $user, {capitalized} $subject, $permissions, $label) 
    {
        return PolicyService::checkPermission($user, $subject, $permissions, $label);
    }
}
