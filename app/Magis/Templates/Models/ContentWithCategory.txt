<?php

namespace App\Models{moduleWithLeadingSlash};

use Laravel\Scout\Searchable;
use App\Magis\MagisContentModel;
use App\Magis\Traits\Models\HasTags;
use Illuminate\Support\Facades\Auth;
use App\Magis\Traits\Models\HasPhoto;
use App\Magis\Traits\Models\HasAuthor;
use App\Magis\Traits\Models\SavesSlug;
use Illuminate\Database\Eloquent\Model;
use App\Magis\Traits\Models\HasRevisions;
use App\Magis\Traits\Models\RecordsActivity;
use Illuminate\Database\Eloquent\SoftDeletes;
use App\Magis\Traits\Models\SavesCreatedUpdatedBy;
use App\Magis\Traits\Models\EnforcesPublishedScope;
use App\Models{moduleWithLeadingSlash}\{capitalized}Category;

class {capitalized} extends MagisContentModel
{
    use RecordsActivity, SavesSlug, SavesCreatedUpdatedBy, EnforcesPublishedScope,
        SoftDeletes, HasTags, HasAuthor, HasRevisions, HasPhoto, Searchable;

    const PLURAL = '{slug}';
    const SINGULAR = '{singularslug}';
    const SLUG = '{slug}';
    const TITLE = '{humanpluralcapitalized}';
    {moduleAttribute}

    const FIELD_LABELS = [
        'is_draft' => 'Save as Draft',
        '{snakecase}_categories' => 'Categories',
        'published_at' => 'Publish Schedule',
    ];

    const SEARCHABLE_FIELDS = [
        'id', 'name', 'author', 'content', 'tag', 'excerpt', '{snakecase}_categories',
    ];

    const RELATIONS = [
        '{camelcase}Categories' => 'many'
    ];

    public static function manageColumns()
    {
        return [
            'photo' => 'Photo',
            'name' => 'Name',
            'author' => 'Author',
            '{snakecase}_categories' => 'Categories',
            'published_at' => 'Publish Schedule',
        ];
    }

    public static function manageColumnsDefault()
    {
        return ['photo', 'name', 'author', '{snakecase}_categories', 'published_at'];
    }

    public static function editableFields({capitalized} ${camelcase} = null)
    {
        if (Auth::check() && !${camelcase}) {
            ${camelcase} = new {capitalized};

            // so that new {camelcase}s are considered the logged-in user's for the "own" permission option
            ${camelcase}->user_id = Auth::user()->id;
        }
        $editableFields = [
            'photo' => 'photo',
            'name' => 'string',
            'author' => 'string',
            'content' => 'mediumText',
            '{snakecase}_categories' => 'many-relation',
            'tags' => 'string',
            'excerpt' => 'string',
            'published_at' => 'datetime',
            'is_draft' => 'boolean',
        ];

        if (Auth::check()) {
            if (Auth::user()->can('schedule', ${camelcase})) {
                $editableFields['published_at'] = 'datetime';
            }
            if (Auth::user()->can('draft', ${camelcase})) {
                $editableFields['is_draft'] = 'boolean';
            }
        }
        
        return $editableFields;
    }

    public function {camelcase}Categories()
    {
        return $this->belongsToMany({capitalized}Category::class);
    }

    /**
     * Get the indexable data array for the model.
     *
     * @return array
     */
    public function toSearchableArray()
    {
        $item = array_only($this->load('{camelcase}Categories')->toArray(), $this::SEARCHABLE_FIELDS);

        // remember that when models are ->toArray()'d, relationships are switched to kebab-case
        $item['{snakecase}_categories'] = implode(',', array_pluck($item['{snakecase}_categories'], 'name'));

        return $item;
    }
}
